CONCEPT NAME	DESCRIPTION	# ARGUMENTS	INCLUDES 	FOUND	CPP20 STD	IS CONCEPT	SPECIALIZATIONS	PASSING TYPES
same_as	specifies that a type is the same as another type	2	concepts	TRUE	TRUE	TRUE		
derived_from	specifies that a type is derived from another type	2	concepts	TRUE	TRUE	TRUE		
convertible_to	specifies that a type is implicitly convertible to another type	2	concepts	TRUE	TRUE	TRUE		
common_reference_with	specifies that two types share a common reference type	2	concepts	TRUE	TRUE	TRUE		
common_with	specifies that two types share a common type	2	concepts	TRUE	TRUE	TRUE		
integral	specifies that a type is an integral type	1	concepts	TRUE	TRUE	TRUE		
signed_integral	specifies that a type is an integral type that is signed	1	concepts	TRUE	TRUE	TRUE		
unsigned_integral	specifies that a type is an integral type that is unsigned	1	concepts	TRUE	TRUE	TRUE		
floating_point	specifies that a type is a floating-point type	1	concepts	TRUE	TRUE	TRUE		
assignable_from	specifies that a type is assignable from another type	2	concepts	TRUE	TRUE	TRUE		
swappable	specifies that a type can be swapped or that two types can be swapped with each other	1	concepts	TRUE	TRUE	TRUE		
swappable_with	specifies that a type can be swapped or that two types can be swapped with each other	2	concepts	TRUE	TRUE	TRUE		
destructible	specifies that an object of the type can be destroyed	1	concepts	TRUE	TRUE	TRUE		
constructible_from	specifies that a variable of the type can be constructed from or bound to a set of argument types	1	concepts	TRUE	TRUE	TRUE		
default_initializable	specifies that an object of a type can be default constructed	1	concepts	TRUE	TRUE	TRUE		
move_constructible	specifies that an object of a type can be move constructed	1	concepts	TRUE	TRUE	TRUE		
copy_constructible	specifies that an object of a type can be copy constructed and move constructed	1	concepts	TRUE	TRUE	TRUE		
boolean-testable	specifies that a type can be used in Boolean contexts	0	concepts	FALSE	TRUE	TRUE		
equality_comparable	specifies that operator == is an equivalence relation	1	concepts	TRUE	TRUE	TRUE		
equality_comparable_with	specifies that operator == is an equivalence relation	2	concepts	TRUE	TRUE	TRUE		
totally_ordered	specifies that the comparison operators on the type yield a total order	1	concepts	TRUE	TRUE	TRUE		
totally_ordered_with	specifies that the comparison operators on the type yield a total order	2	concepts	TRUE	TRUE	TRUE		
three_way_comparable	specifies that operator <=> produces consistent result on given types	1	concepts	TRUE	TRUE	TRUE		
three_way_comparable_with	specifies that operator <=> produces consistent result on given types	2	concepts	TRUE	TRUE	TRUE		
movable	specifies that an object of a type can be moved and swapped	1	concepts	TRUE	TRUE	TRUE		
copyable	specifies that an object of a type can be copied, moved, and swapped	1	concepts	TRUE	TRUE	TRUE		
semiregular	specifies that an object of a type can be copied, moved, swapped, and default constructed	1	concepts	TRUE	TRUE	TRUE		
regular	specifies that a type is regular, that is, it is both semiregular and equality_comparable	1	concepts	TRUE	TRUE	TRUE		
invocable	specifies that a callable type can be invoked with a given set of argument types	1	concepts	TRUE	TRUE	TRUE		
regular_invocable	specifies that a callable type can be invoked with a given set of argument types	1	concepts	TRUE	TRUE	TRUE		
predicate	specifies that a callable type is a Boolean predicate	1	concepts	TRUE	TRUE	TRUE		
relation	specifies that a callable type is a binary relation	3	concepts	TRUE	TRUE	TRUE		
equivalence_relation	specifies that a relation imposes an equivalence relation	3	concepts	TRUE	TRUE	TRUE		
strict_weak_order	specifies that a relation imposes a strict weak ordering	3	concepts	TRUE	TRUE	TRUE		
indirectly_readable	specifies that a type is indirectly readable by applying operator *	1	iterator	TRUE	TRUE	TRUE		
indirectly_writable	specifies that a value can be written to an iterator's referenced object	2	iterator	TRUE	TRUE	TRUE		
weakly_incrementable	specifies that a semiregular type can be incremented with pre- and post-increment operators	1	iterator	TRUE	TRUE	TRUE		
incrementable	specifies that the increment operation on a weakly_incrementable type is equality-preserving and that the type is equality_comparable	1	iterator	TRUE	TRUE	TRUE		
input_or_output_iterator	specifies that objects of a type can be incremented and dereferenced	1	iterator	TRUE	TRUE	TRUE		
sentinel_for	specifies a type is a sentinel for an input_or_output_iterator type	2	iterator	TRUE	TRUE	TRUE		
sized_sentinel_for	specifies that the - operator can be applied to an iterator and a sentinel to calculate their difference in constant time	2	iterator	TRUE	TRUE	TRUE		
input_iterator	specifies that a type is an input iterator, that is, its referenced values can be read and it can be both pre- and post-incremented	1	iterator	TRUE	TRUE	TRUE		
output_iterator	specifies that a type is an output iterator for a given value type, that is, values of that type can be written to it and it can be both pre- and post-incremented	2	iterator	TRUE	TRUE	TRUE		
forward_iterator	specifies that an input_iterator is a forward iterator, supporting equality comparison and multi-pass	1	iterator	TRUE	TRUE	TRUE		
bidirectional_iterator	specifies that a forward_iterator is a bidirectional iterator, supporting movement backwards	1	iterator	TRUE	TRUE	TRUE		
random_access_iterator	specifies that a bidirectional_iterator is a random-access iterator, supporting advancement in constant time and subscripting	1	iterator	TRUE	TRUE	TRUE		
contiguous_iterator	specifies that a random_access_iterator is a contiguous iterator, referring to elements that are contiguous in memory	1	iterator	TRUE	TRUE	TRUE		
indirectly_unary_invocable	specifies that a callable type can be invoked with the result of dereferencing an indirectly_readable type	2	iterator	TRUE	TRUE	TRUE		
indirectly_regular_unary_invocable	specifies that a callable type can be invoked with the result of dereferencing an indirectly_readable type	2	iterator	TRUE	TRUE	TRUE		
indirect_unary_predicate	specifies that a callable type, when invoked with the result of dereferencing an indirectly_readable type, satisfies predicate	2	iterator	TRUE	TRUE	TRUE		
indirect_binary_predicate	specifies that a callable type, when invoked with the result of dereferencing two indirectly_readable types, satisfies predicate	3	iterator	TRUE	TRUE	TRUE		
indirect_equivalence_relation	specifies that a callable type, when invoked with the result of dereferencing two indirectly_readable types, satisfies equivalence_relation	2	iterator	TRUE	TRUE	TRUE		
indirect_strict_weak_order	specifies that a callable type, when invoked with the result of dereferencing two indirectly_readable types, satisfies strict_weak_order	2	iterator	TRUE	TRUE	TRUE		
indirectly_movable	specifies that values may be moved from an indirectly_readable type to an indirectly_writable type	2	iterator	TRUE	TRUE	TRUE		
indirectly_movable_storable	specifies that values may be moved from an indirectly_readable type to an indirectly_writable type and that the move may be performed via an intermediate object	2	iterator	TRUE	TRUE	TRUE		
indirectly_copyable	specifies that values may be copied from an indirectly_readable type to an indirectly_writable type	2	iterator	TRUE	TRUE	TRUE		
indirectly_copyable_storable	specifies that values may be copied from an indirectly_readable type to an indirectly_writable type and that the copy may be performed via an intermediate object	2	iterator	TRUE	TRUE	TRUE		
indirectly_swappable	specifies that the values referenced by two indirectly_readable types can be swapped	1	iterator	TRUE	TRUE	TRUE		
indirectly_comparable	specifies that the values referenced by two indirectly_readable types can be compared	3	iterator	TRUE	TRUE	TRUE		
permutable	specifies the common requirements of algorithms that reorder elements in place	1	iterator	TRUE	TRUE	TRUE		
mergeable	specifies the requirements of algorithms that merge sorted sequences into an output sequence by copying elements	3	iterator	TRUE	TRUE	TRUE		
sortable	specifies the common requirements of algorithms that permute sequences into ordered sequences	1	iterator	TRUE	TRUE	TRUE		
range	specifies that a type is a range, that is, it provides a begin iterator and an end sentinel	1	ranges	TRUE	TRUE	TRUE		
borrowed_range	specifies that a type is a range and iterators obtained from an expression of it can be safely returned without danger of dangling	1	ranges	TRUE	TRUE	TRUE		
sized_range	specifies that a range knows its size in constant time	1	ranges	TRUE	TRUE	TRUE		
view	specifies that a range is a view, that is, it has constant time copy/move/assignment	1	ranges	TRUE	TRUE	TRUE		
input_range	specifies a range whose iterator type satisfies input_iterator	1	ranges	TRUE	TRUE	TRUE		
output_range	specifies a range whose iterator type satisfies output_iterator	2	ranges	TRUE	TRUE	TRUE		
forward_range	specifies a range whose iterator type satisfies forward_iterator	1	ranges	TRUE	TRUE	TRUE		
bidirectional_range	specifies a range whose iterator type satisfies bidirectional_iterator	1	ranges	TRUE	TRUE	TRUE		
random_access_range	specifies a range whose iterator type satisfies random_access_iterator	1	ranges	TRUE	TRUE	TRUE		
contiguous_range	specifies a range whose iterator type satisfies contiguous_iterator	1	ranges	TRUE	TRUE	TRUE		
common_range	specifies that a range has identical iterator and sentinel types	1	ranges	TRUE	TRUE	TRUE		
viewable_range	specifies the requirements for a range to be safely convertible to a view	1	ranges	TRUE	TRUE	TRUE		
is_void_v	checks if a type is void	1	type_traits	TRUE	TRUE	FALSE		
is_null_pointer_v	checks if a type is std::nullptr_t	1	type_traits	TRUE	TRUE	FALSE		
is_integral_v	checks if a type is an integral type	1	type_traits	TRUE	TRUE	FALSE		
is_floating_point_v	checks if a type is a floating-point type	1	type_traits	TRUE	TRUE	FALSE		
is_array_v	checks if a type is an array type	1	type_traits	TRUE	TRUE	FALSE		
is_enum_v	checks if a type is an enumeration type	1	type_traits	TRUE	TRUE	FALSE		
is_union_v	checks if a type is an union type	1	type_traits	TRUE	TRUE	FALSE		
is_class_v	checks if a type is a non-union class type	1	type_traits	TRUE	TRUE	FALSE		
is_function_v	checks if a type is a function type	1	type_traits	TRUE	TRUE	FALSE		
is_pointer_v	checks if a type is a pointer type	1	type_traits	TRUE	TRUE	FALSE		
is_lvalue_reference_v	checks if a type is a lvalue reference	1	type_traits	TRUE	TRUE	FALSE		
is_rvalue_reference_v	checks if a type is a rvalue reference	1	type_traits	TRUE	TRUE	FALSE		
is_member_object_pointer_v	checks if a type is a pointer to a non-static member object	1	type_traits	TRUE	TRUE	FALSE		
is_member_function_pointer_v	checks if a type is a pointer to a non-static member function	1	type_traits	TRUE	TRUE	FALSE		
is_fundamental_v	checks if a type is a fundamental type	1	type_traits	TRUE	TRUE	FALSE		
is_arithmetic_v	checks if a type is an arithmetic type	1	type_traits	TRUE	TRUE	FALSE		
is_scalar_v	checks if a type is a scalar type	1	type_traits	TRUE	TRUE	FALSE		
is_object_v	checks if a type is an object type	1	type_traits	TRUE	TRUE	FALSE		
is_compound_v	checks if a type is a compound type	1	type_traits	TRUE	TRUE	FALSE		
is_reference_v	checks if a type is either a lvalue reference or rvalue reference	1	type_traits	TRUE	TRUE	FALSE		
is_member_pointer_v	checks if a type is a pointer to an non-static member function or object	1	type_traits	TRUE	TRUE	FALSE		
is_const_v	checks if a type is const-qualified	1	type_traits	TRUE	TRUE	FALSE		
is_volatile_v	checks if a type is volatile-qualified	1	type_traits	TRUE	TRUE	FALSE		
is_trivial_v	checks if a type is trivial	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_copyable_v	checks if a type is trivially copyable	1	type_traits	TRUE	TRUE	FALSE		
is_standard_layout_v	checks if a type is a standard-layout type	1	type_traits	TRUE	TRUE	FALSE		
has_unique_object_representations_v	checks if every bit in the type's object representation contributes to its value	1	type_traits	TRUE	TRUE	FALSE		
is_empty_v	checks if a type is a class (but not union) type and has no non-static data members	1	type_traits	TRUE	TRUE	FALSE		
is_polymorphic_v	checks if a type is a polymorphic class type	1	type_traits	TRUE	TRUE	FALSE		
is_abstract_v	checks if a type is an abstract class type	1	type_traits	TRUE	TRUE	FALSE		
is_final_v	checks if a type is a final class type	1	type_traits	TRUE	TRUE	FALSE		
is_aggregate_v	checks if a type is an aggregate type	1	type_traits	TRUE	TRUE	FALSE		
is_signed_v	checks if a type is a signed arithmetic type	1	type_traits	TRUE	TRUE	FALSE		
is_unsigned_v	checks if a type is an unsigned arithmetic type	1	type_traits	TRUE	TRUE	FALSE		
is_bounded_array_v	checks if a type is an array type of known bound	1	type_traits	TRUE	TRUE	FALSE		
is_unbounded_array_v	checks if a type is an array type of unknown bound	1	type_traits	TRUE	TRUE	FALSE		
is_constructible_v	checks if a type has a constructor for specific arguments	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_constructible_v	checks if a type has a constructor for specific arguments	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_constructible_v	checks if a type has a constructor for specific arguments	1	type_traits	TRUE	TRUE	FALSE		
is_default_constructible_v	checks if a type has a default constructor	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_default_constructible_v	checks if a type has a default constructor	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_default_constructible_v	checks if a type has a default constructor	1	type_traits	TRUE	TRUE	FALSE		
is_copy_constructible_v	checks if a type has a copy constructor	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_copy_constructible_v	checks if a type has a copy constructor	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_copy_constructible_v	checks if a type has a copy constructor	1	type_traits	TRUE	TRUE	FALSE		
is_move_constructible_v	checks if a type can be constructed from an rvalue reference	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_move_constructible_v	checks if a type can be constructed from an rvalue reference	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_move_constructible_v	checks if a type can be constructed from an rvalue reference	1	type_traits	TRUE	TRUE	FALSE		
is_assignable_v	checks if a type has a assignment operator for a specific argument	2	type_traits	TRUE	TRUE	FALSE		
is_trivially_assignable_v	checks if a type has a assignment operator for a specific argument	2	type_traits	TRUE	TRUE	FALSE		
is_nothrow_assignable_v	checks if a type has a assignment operator for a specific argument	2	type_traits	TRUE	TRUE	FALSE		
is_copy_assignable_v	checks if a type has a copy assignment operator	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_copy_assignable_v	checks if a type has a copy assignment operator	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_copy_assignable_v	checks if a type has a copy assignment operator	1	type_traits	TRUE	TRUE	FALSE		
is_move_assignable_v	checks if a type has a move assignment operator	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_move_assignable_v	checks if a type has a move assignment operator	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_move_assignable_v	checks if a type has a move assignment operator	1	type_traits	TRUE	TRUE	FALSE		
is_destructible_v	checks if a type has a non-deleted destructor	1	type_traits	TRUE	TRUE	FALSE		
is_trivially_destructible_v	checks if a type has a non-deleted destructor	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_destructible_v	checks if a type has a non-deleted destructor	1	type_traits	TRUE	TRUE	FALSE		
has_virtual_destructor_v	checks if a type has a virtual destructor	1	type_traits	TRUE	TRUE	FALSE		
is_swappable_with_v	checks if objects of a type can be swapped with objects of same or different type	2	type_traits	TRUE	TRUE	FALSE		
is_swappable_v	checks if objects of a type can be swapped with objects of same or different type	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_swappable_with_v	checks if objects of a type can be swapped with objects of same or different type	2	type_traits	TRUE	TRUE	FALSE		
is_nothrow_swappable_v	checks if objects of a type can be swapped with objects of same or different type	1	type_traits	TRUE	TRUE	FALSE		
is_same_v	checks if two types are the same	2	type_traits	TRUE	TRUE	FALSE		
is_base_of_v	checks if a type is derived from the other type	2	type_traits	TRUE	TRUE	FALSE		
is_convertible_v	checks if a type can be converted to the other type	2	type_traits	TRUE	TRUE	FALSE		
is_nothrow_convertible_v	checks if a type can be converted to the other type	2	type_traits	TRUE	TRUE	FALSE		
is_invocable_v	checks if a type can be invoked (as if by std::invoke) with the given argument types	1	type_traits	TRUE	TRUE	FALSE		
is_invocable_r_v	checks if a type can be invoked (as if by std::invoke) with the given argument types	2	type_traits	TRUE	TRUE	FALSE		
is_nothrow_invocable_v	checks if a type can be invoked (as if by std::invoke) with the given argument types	1	type_traits	TRUE	TRUE	FALSE		
is_nothrow_invocable_r_v	checks if a type can be invoked (as if by std::invoke) with the given argument types	2	type_traits	TRUE	TRUE	FALSE		
is_layout_compatible_v	checks if two types are layout-compatible	0	type_traits	FALSE	TRUE	FALSE		
is_pointer_interconvertible_base_of_v	checks if a type is a pointer-interconvertible (initial) base of another type	0	type_traits	FALSE	TRUE	FALSE		
is_pointer_interconvertible_with_class_v	checks if objects of a type are pointer-interconvertible with the specified subobject of that type	0	type_traits	FALSE	TRUE	FALSE		
is_corresponding_member_v	checks if two specified members correspond to each other in the common initial subsequence of two specified types	0	type_traits	FALSE	TRUE	FALSE		
